/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Hospital.InventoryManager;

import Business.Drug;
import Business.Enterprises.Enterprise;
import Business.Enterprises.Government;
import Business.Enterprises.Hospital;
import Business.InventoryItem;
import Business.MedicinePackage;
import Business.Network.Network;
import Business.Organizations.Organization;
import Business.UserAccount;
import Business.WorkRequest.ComplaintWorkRequest;
import Business.WorkRequest.ReceiveShippmentWorkRequest;
import Business.WorkRequest.WorkRequest;
import java.awt.CardLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Mayank
 */
public class ViewDetailsJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    Hospital selectedEnterprise;
    UserAccount userAccount;
    Network selectedNetwork;
    ReceiveShippmentWorkRequest request;
    ViewWorkQueueJPanel viewWorkQueueJPanel;
    ArrayList<Drug> unlicensedDrugList;
    ArrayList<MedicinePackage> expiredMedicinePackageList;

    /**
     * Creates new form BusinessAdminJPanel
     */
    public ViewDetailsJPanel(JPanel userProcessContainer, Enterprise selectedEnterprise, UserAccount userAccount, Network selectedNetwork, ReceiveShippmentWorkRequest request, ViewWorkQueueJPanel viewWorkQueueJPanel) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.selectedEnterprise = (Hospital) selectedEnterprise;
        this.userAccount = userAccount;
        this.selectedNetwork = selectedNetwork;
        this.request = request;
        this.viewWorkQueueJPanel = (ViewWorkQueueJPanel) viewWorkQueueJPanel;
        unlicensedDrugList = new ArrayList<>();
        expiredMedicinePackageList = new ArrayList<>();

        refreshOrder();

        enterpriseNameJLabel.setText(" --  " + selectedEnterprise.getEnterpriseName());
        networkNameJLabel.setText(selectedNetwork.getNetworkName());


        orderIDJLabel.setText(" --  " + request.getShipWorkRequest().getOrderDrugsWorkRequest().getOrder().getOrderNumber());

        Organization o = selectedEnterprise.getMyOrganization(userAccount);
        organizationNameJLabel.setText(o.getOrganizationName());

        addToInventoryJButton.setVisible(false);
        jScrollPane3.setVisible(false);
        unlicensedDrugsJTable.setVisible(false);
        jScrollPane4.setVisible(false);
        expiredDrugsJTable.setVisible(false);

    }

    private void refreshOrder() {

        int rowCount = orderJTable.getRowCount();

        for (int i = rowCount - 1; i >= 0; i--) {
            ((DefaultTableModel) orderJTable.getModel()).removeRow(i);
        }

        for (InventoryItem ii : request.getShipWorkRequest().getInventory().getInventoryItemList()) {

            Object[] row = new Object[3];
            row[0] = ii.getDrug().getDrugId();
            row[1] = ii.getDrug().getDrugName();
            row[2] = ii.getQuantity();
            ((DefaultTableModel) orderJTable.getModel()).addRow(row);

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backJButton2 = new javax.swing.JButton();
        businessNameJLabel = new javax.swing.JLabel();
        enterpriseNameJLabel = new javax.swing.JLabel();
        networkNameJLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        organizationNameJLabel = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        titleJLabel = new javax.swing.JLabel();
        drugNameTitleJLabel = new javax.swing.JLabel();
        orderIDJLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        verifyDrugJButton = new javax.swing.JButton();
        addToInventoryJButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        tableJLabel = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        unlicensedDrugsJTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        expiredDrugsJTable = new javax.swing.JTable();

        backJButton2.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        backJButton2.setText("Back");
        backJButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backJButton2.setPreferredSize(new java.awt.Dimension(80, 30));
        backJButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton2ActionPerformed(evt);
            }
        });

        businessNameJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        businessNameJLabel.setText("Drug Tracking System");

        enterpriseNameJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        enterpriseNameJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        enterpriseNameJLabel.setMinimumSize(new java.awt.Dimension(170, 24));
        enterpriseNameJLabel.setPreferredSize(new java.awt.Dimension(170, 24));

        networkNameJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        networkNameJLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        networkNameJLabel.setMaximumSize(new java.awt.Dimension(195, 24));
        networkNameJLabel.setMinimumSize(new java.awt.Dimension(195, 24));
        networkNameJLabel.setPreferredSize(new java.awt.Dimension(195, 24));

        organizationNameJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        organizationNameJLabel.setMinimumSize(new java.awt.Dimension(170, 24));
        organizationNameJLabel.setPreferredSize(new java.awt.Dimension(190, 24));

        titleJLabel.setFont(new java.awt.Font("Times New Roman", 1, 26)); // NOI18N
        titleJLabel.setText("View Details");

        drugNameTitleJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        drugNameTitleJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        drugNameTitleJLabel.setText("Order ID");
        drugNameTitleJLabel.setMinimumSize(new java.awt.Dimension(170, 24));
        drugNameTitleJLabel.setPreferredSize(new java.awt.Dimension(170, 24));

        orderIDJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        orderIDJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        orderIDJLabel.setMinimumSize(new java.awt.Dimension(170, 24));
        orderIDJLabel.setPreferredSize(new java.awt.Dimension(170, 24));

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(orderJTable);

        backJButton.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        backJButton.setText("Back");
        backJButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backJButton.setPreferredSize(new java.awt.Dimension(80, 30));
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        verifyDrugJButton.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        verifyDrugJButton.setText("Verify Drugs");
        verifyDrugJButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        verifyDrugJButton.setPreferredSize(new java.awt.Dimension(80, 30));
        verifyDrugJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifyDrugJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(verifyDrugJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 156, -1));

        addToInventoryJButton.setFont(new java.awt.Font("Times New Roman", 1, 15)); // NOI18N
        addToInventoryJButton.setText("Add To Inventory");
        addToInventoryJButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addToInventoryJButton.setPreferredSize(new java.awt.Dimension(80, 30));
        addToInventoryJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToInventoryJButtonActionPerformed(evt);
            }
        });
        jPanel1.add(addToInventoryJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 156, -1));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableJLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N
        tableJLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        tableJLabel.setMinimumSize(new java.awt.Dimension(170, 24));
        tableJLabel.setPreferredSize(new java.awt.Dimension(170, 24));
        jPanel2.add(tableJLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 10, 190, -1));

        unlicensedDrugsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Drug ID", "Drug Name", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(unlicensedDrugsJTable);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 555, 156));

        expiredDrugsJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Unique ID", "Drug Name", "Batch Number"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(expiredDrugsJTable);

        jPanel2.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 40, 555, 156));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator2)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(drugNameTitleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(orderIDJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 555, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(backJButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(organizationNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 426, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(businessNameJLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(enterpriseNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 361, Short.MAX_VALUE)
                                .addComponent(networkNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(372, 372, 372)
                        .addComponent(titleJLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 698, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(businessNameJLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enterpriseNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(networkNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(organizationNameJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(titleJLabel)
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(orderIDJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(drugNameTitleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(backJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(66, 66, 66)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(33, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void addToInventoryJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToInventoryJButtonActionPerformed
        // TODO add your handling code here:


        boolean flag = true;

        for (InventoryItem iii : request.getShipWorkRequest().getInventory().getInventoryItemList()) {
            for (InventoryItem ii : selectedEnterprise.getInventory().getInventoryItemList()) {
                if (ii.getDrug() == iii.getDrug()) {
                    ii.setQuantity(ii.getQuantity() + iii.getQuantity());
                    for (MedicinePackage mp : iii.getMedicinePackageList()) {
                        ii.getMedicinePackageList().add(mp);

                    }
                }
                flag = false;
            }

        }

        if (flag) {
            for (InventoryItem iii : request.getShipWorkRequest().getInventory().getInventoryItemList()) {
                InventoryItem i = selectedEnterprise.getInventory().newInventoryItem();
                i.setQuantity(iii.getQuantity());
                i.setDrug(iii.getDrug());
                i.setMedicinePackageList(iii.getMedicinePackageList());
            }
        }



        SimpleDateFormat sdf = new SimpleDateFormat("MM dd yy HH:mm:ss");
        Date d = new Date();
        String currentDate = sdf.format(d);
        request.setResolveDate(currentDate);
        request.setStatus(WorkRequest.Status.OrderReceived);
        viewWorkQueueJPanel.refreshWorkQueue();
        JOptionPane.showMessageDialog(null, "Order Successfully Added To Inventory");
        userProcessContainer.remove(this);
        CardLayout cardLayout = (CardLayout) userProcessContainer.getLayout();
        cardLayout.previous(userProcessContainer);

    }//GEN-LAST:event_addToInventoryJButtonActionPerformed

    private void backJButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backJButton2ActionPerformed

    private void verifyDrugJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifyDrugJButtonActionPerformed
        // TODO add your handling code here:
        int count1 = 0;
        int count2 = 0;

        boolean flag = true;
        boolean flag2 = true;

        Network reqNetwork = Business.Business.getInstance().getNetworkDirectory().getMyNetwork(request.getSender());
        Government govt = (Government) reqNetwork.getEnterpriseDirectory().getSelectedEnterprise(Enterprise.Type.GOVERNMENT);
        Enterprise reqEnterprise = reqNetwork.getEnterpriseDirectory().getMyEnterprise(request.getSender());

        for (InventoryItem ii : request.getShipWorkRequest().getInventory().getInventoryItemList()) {
            for (Drug drug : govt.getIllegitimateDrugList()) {
                if (ii.getDrug() == drug) {
                    JOptionPane.showMessageDialog(null, "Shippment Consists Of Illegitimate Drugs");
                    JOptionPane.showMessageDialog(null, "Order Added To Rejected List");
                    selectedEnterprise.getRejectedWorkRequest().add(request);
                    flag2 = false;
                }
            }
            if (flag2) {
                try {
                    String expDate = ii.getDrug().getLicenseExpiryDate();
                    Date d = new SimpleDateFormat("MM dd yy HH:mm:ss").parse(expDate);

                    if (d.before(new Date())) {
                        count1++;
                        unlicensedDrugList.add(ii.getDrug());
                    }
                } catch (ParseException pe) {
                }
            }
        }

        if (count1 > 0) {
            ComplaintWorkRequest req = (ComplaintWorkRequest) govt.getComplaintHandlingOrganization().getWorkQueue().newWorkRequest(WorkRequest.Type.ComplaintWorkRequest);
            req.setRequest(request);
            req.setFromEnterprise(selectedEnterprise);
            req.setAgainstEnterprise(reqEnterprise);
            req.setComplaintType(ComplaintWorkRequest.complaintType.UnlicensedDrug);
            req.setRequest(request);
            req.setUnlicensedDrug(unlicensedDrugList);

            selectedEnterprise.getRejectedWorkRequest().add(request);
            JOptionPane.showMessageDialog(null, "Order Consists of Unlicense Drug.");
            JOptionPane.showMessageDialog(null, "Order Added To Rejected Order List And Report Sent To FDA");

            verifyDrugJButton.setEnabled(false);
            jScrollPane3.setVisible(true);
            unlicensedDrugsJTable.setVisible(true);

            int rowCount = unlicensedDrugsJTable.getRowCount();

            for (int i = rowCount - 1; i >= 0; i--) {
                ((DefaultTableModel) unlicensedDrugsJTable.getModel()).removeRow(i);
            }

            for (InventoryItem iii : request.getShipWorkRequest().getInventory().getInventoryItemList()) {
                for (Drug d : unlicensedDrugList) {
                    if (iii.getDrug() == d) {
                        Object row[] = new Object[3];
                        row[0] = d.getDrugId();
                        row[1] = d.getDrugName();
                        row[2] = iii.getQuantity();

                        ((DefaultTableModel) unlicensedDrugsJTable.getModel()).addRow(row);
                    }
                }
            }


            flag = false;
        }

        if (flag) {
            for (InventoryItem ii : request.getShipWorkRequest().getInventory().getInventoryItemList()) {
                for (MedicinePackage mp : ii.getMedicinePackageList()) {
                    for (MedicinePackage m : govt.getSuspectPackageList()) {
                        if (mp == m) {
                            JOptionPane.showMessageDialog(null, "Shippment Consists Of Suspect Drugs");
                            JOptionPane.showMessageDialog(null, "Order Added To Rejected List");
                            selectedEnterprise.getRejectedWorkRequest().add(request);
                            flag2 = false;
                        }
                    }
                    if (flag2) {
                        for (MedicinePackage m : govt.getTheftPackageList()) {
                            if (mp == m) {
                                JOptionPane.showMessageDialog(null, "Shippment Consists Of Theft Drugs");
                                JOptionPane.showMessageDialog(null, "Order Added To Rejected List");
                                selectedEnterprise.getRejectedWorkRequest().add(request);
                                flag2 = false;
                            }
                        }
                        if (flag2) {
                            try {
                                String expDate = mp.getBatch().getExpiryDate();
                                Date d = new SimpleDateFormat("MM dd yy HH:mm:ss").parse(expDate);

                                if (d.before(new Date())) {
                                    count2++;
                                    expiredMedicinePackageList.add(mp);
                                }
                            } catch (ParseException pe) {
                            }
                        }
                    }
                }

                if (count2 > 0) {
                    ComplaintWorkRequest req = (ComplaintWorkRequest) govt.getComplaintHandlingOrganization().getWorkQueue().newWorkRequest(WorkRequest.Type.ComplaintWorkRequest);
                    req.setRequest(request);
                    req.setFromEnterprise(selectedEnterprise);
                    req.setAgainstEnterprise(reqEnterprise);
                    req.setComplaintType(ComplaintWorkRequest.complaintType.UnlicensedDrug);
                    req.setRequest(request);
                    req.setMedicinePackageList(expiredMedicinePackageList);

                    selectedEnterprise.getRejectedWorkRequest().add(request);
                    JOptionPane.showMessageDialog(null, "Order Consists of Expired Drugs.");
                    JOptionPane.showMessageDialog(null, "Order Added To Rejected Order List And Report Sent To FDA");

                    verifyDrugJButton.setEnabled(false);
                    jScrollPane4.setVisible(true);
                    expiredDrugsJTable.setVisible(true);

                    int rowCount = expiredDrugsJTable.getRowCount();

                    for (int i = rowCount - 1; i >= 0; i--) {
                        ((DefaultTableModel) expiredDrugsJTable.getModel()).removeRow(i);
                    }

                    for (MedicinePackage mp : expiredMedicinePackageList) {
                        Object row[] = new Object[3];
                        row[0] = mp.getUniqueID();
                        row[1] = mp.getBatch().getDrug().getDrugName();
                        row[2] = mp.getBatch().getBatchID();

                        ((DefaultTableModel) expiredDrugsJTable.getModel()).addRow(row);
                    }


                    flag = false;
                }
            }

            if (flag) {
                JOptionPane.showMessageDialog(null, "All Drugs Verified");
                JOptionPane.showMessageDialog(null, "Add Order To Inventory");
                verifyDrugJButton.setVisible(false);
                addToInventoryJButton.setVisible(true);
            }
        }
    }//GEN-LAST:event_verifyDrugJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToInventoryJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton backJButton2;
    private javax.swing.JLabel businessNameJLabel;
    private javax.swing.JLabel drugNameTitleJLabel;
    private javax.swing.JLabel enterpriseNameJLabel;
    private javax.swing.JTable expiredDrugsJTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel networkNameJLabel;
    private javax.swing.JLabel orderIDJLabel;
    private javax.swing.JTable orderJTable;
    private javax.swing.JLabel organizationNameJLabel;
    private javax.swing.JLabel tableJLabel;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JTable unlicensedDrugsJTable;
    private javax.swing.JButton verifyDrugJButton;
    // End of variables declaration//GEN-END:variables
}
